version: '3.9'
services:

  exampleproj:
    restart: always
    image: exampleproj 
    build:
      dockerfile: ./dockerfiles/dev.dockerfile
    ports:
      - "${APP_PORT:-8080}:${APP_PORT:-8080}"

    env_file:
      - .env

    networks:
      - ci-exampleproj
    depends_on:
      - redis
      - db

    volumes:
      - .:/app/
      - go-mod-data:/go/pkg/mod
      - go-cache:/root/.cache

  db:
    restart: always
    image: postgres:13-alpine
    volumes:
      - ./scripts/create_postgres_db.sql:/docker-entrypoint-initdb.d/init.sql
      - db-backup-data:/var/lib/postgresql/data
    env_file:
      - .env

    environment:
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - POSTGRES_DB=${DB_NAME}
      - POSTGRES_PORT=${DB_PORT}

    networks:
      - ci-exampleproj
    ports:
      - "${DB_PORT:-5432}:${DB_PORT:-5432}"

    healthcheck:
      test: ["CMD", "pg_isready", "-U", "postgres"]
      interval: 10s
      timeout: 5s
      retries: 3

  redis:
    restart: always
    image: redis:6.2.4-alpine
    volumes:
      - redis-data:/data
    networks:
      - ci-exampleproj
    ports:
      - "${REDIS_PORT:-6379}:6379"

    env_file:
      - .env

    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3

networks:
  ci-exampleproj:
    driver: bridge

volumes:
  db-backup-data:  # db
  redis-data:  # cache
  go-mod-data:
  go-cache:
